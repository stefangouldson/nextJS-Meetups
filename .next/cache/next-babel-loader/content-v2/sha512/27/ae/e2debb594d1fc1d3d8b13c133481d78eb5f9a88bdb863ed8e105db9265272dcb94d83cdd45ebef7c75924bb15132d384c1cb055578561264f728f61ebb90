{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stefan/Documents/udemy/react/nextJS-project/pages/[meetupID]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from 'next/head';\n\nconst MeetUpDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"Description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description,\n      image: props.meetupData.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(`mongodb+srv://stefan:${process.env.MONGO_PASSWORD}@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupID: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupID = context.params.meetupID;\n  const client = await MongoClient.connect(`mongodb+srv://stefan:{process.env.MONGO_PASSWORD}@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupID)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetUpDetails;","map":{"version":3,"sources":["/Users/stefan/Documents/udemy/react/nextJS-project/pages/[meetupID]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","Head","MeetUpDetails","props","meetupData","title","description","address","image","getStaticPaths","client","connect","process","env","MONGO_PASSWORD","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupID","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE;AAAA,4BACA,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAKE,QAAC,YAAD;AACA,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBC,KADxB;AAEA,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBG,OAF1B;AAGA,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBE,WAH9B;AAIA,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBI;AAJxB;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAcD,CAfD;;AAiBA,OAAO,eAAeC,cAAf,GAA+B;AACpC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAqB,wBAAuBC,OAAO,CAACC,GAAR,CAAYC,cAAe,iEAAvE,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAtB;AAEAX,EAAAA,MAAM,CAACY,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC3C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMlB,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAqB,kHAArB,CAArB;AACA,QAAMI,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEpB,QAAQ,CAAC4B,QAAD;AAAd,GAA1B,CAA7B;AAEAlB,EAAAA,MAAM,CAACY,KAAP;AAEA,SAAO;AACLnB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV8B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVxB,QAAAA,KAAK,EAAE2B,cAAc,CAAC3B,KAFZ;AAGVG,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAHZ;AAIVD,QAAAA,OAAO,EAAEyB,cAAc,CAACzB,OAJd;AAKVD,QAAAA,WAAW,EAAE0B,cAAc,CAAC1B;AALlB;AADP;AADF,GAAP;AAWD;AAED,eAAeJ,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport { MongoClient, ObjectId } from \"mongodb\" \nimport Head from 'next/head'\n\nconst MeetUpDetails = (props) => {\n  return (\n    <>\n    <Head>\n      <title>{props.meetupData.title}</title>\n      <meta name=\"Description\" content={props.meetupData.description} />\n    </Head>\n      <MeetupDetail \n      title={props.meetupData.title} \n      address={props.meetupData.address} \n      description={props.meetupData.description} \n      image={props.meetupData.image} \n      />\n    </>\n  )\n}\n\nexport async function getStaticPaths(){\n  const client = await MongoClient.connect(`mongodb+srv://stefan:${process.env.MONGO_PASSWORD}@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority`)\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();\n\n  client.close()\n\n  return {\n    fallback: false ,\n    paths: meetups.map((meetup) => ({\n      params: { meetupID: meetup._id.toString() }\n    }))\n  }\n}\n\nexport async function getStaticProps(context){\n  const meetupID = context.params.meetupID\n\n  const client = await MongoClient.connect(`mongodb+srv://stefan:{process.env.MONGO_PASSWORD}@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority`)\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupID)});\n\n  client.close()\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  }\n}\n\nexport default MeetUpDetails\n"]},"metadata":{},"sourceType":"module"}