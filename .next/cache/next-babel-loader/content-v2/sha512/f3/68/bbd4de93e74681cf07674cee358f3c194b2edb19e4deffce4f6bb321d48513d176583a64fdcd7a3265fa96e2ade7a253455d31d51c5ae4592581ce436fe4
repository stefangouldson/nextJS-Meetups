{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stefan/Documents/udemy/react/nextJS-project/pages/[meetupID]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nconst MeetUpDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description,\n    image: props.meetupData.image\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://stefan:9CvMaN9B2LyY4RA@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupID: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupID = context.params.meetupID;\n  const client = await MongoClient.connect('mongodb+srv://stefan:9CvMaN9B2LyY4RA@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: mee\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: meetupID,\n        title: 'First Meetup',\n        description: 'Description',\n        address: 'London',\n        image: 'https://www.history.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTYyNDg1MjE3MTI1Mjc5Mzk4/topic-london-gettyimages-760251843-promo.jpg'\n      }\n    }\n  };\n}\nexport default MeetUpDetails;","map":{"version":3,"sources":["/Users/stefan/Documents/udemy/react/nextJS-project/pages/[meetupID]/index.js"],"names":["MeetupDetail","MongoClient","MeetUpDetails","props","meetupData","title","address","description","image","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupID","toString","getStaticProps","context","selectedMeetup","findOne","mee","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBAAO,QAAC,YAAD;AACP,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADjB;AAEP,IAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE,OAFnB;AAGP,IAAA,WAAW,EAAEH,KAAK,CAACC,UAAN,CAAiBG,WAHvB;AAIP,IAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJjB;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,CAPD;;AASA,OAAO,eAAeC,cAAf,GAA+B;AACpC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,qGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC3C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,qGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEc;AAAN,GAA1B,CAA7B;AAEArB,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV4B,QAAAA,EAAE,EAAEP,QADM;AAEVpB,QAAAA,KAAK,EAAE,cAFG;AAGVE,QAAAA,WAAW,EAAE,aAHH;AAIVD,QAAAA,OAAO,EAAE,QAJC;AAKVE,QAAAA,KAAK,EAAE;AALG;AADP;AADF,GAAP;AAWD;AAED,eAAeN,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport { MongoClient } from \"mongodb\" \n\nconst MeetUpDetails = (props) => {\n  return <MeetupDetail \n  title={props.meetupData.title} \n  address={props.meetupData.address} \n  description={props.meetupData.description} \n  image={props.meetupData.image} \n  />\n}\n\nexport async function getStaticPaths(){\n  const client = await MongoClient.connect('mongodb+srv://stefan:9CvMaN9B2LyY4RA@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();\n\n  client.close()\n\n  return {\n    fallback: false ,\n    paths: meetups.map((meetup) => ({\n      params: { meetupID: meetup._id.toString() }\n    }))\n  }\n}\n\nexport async function getStaticProps(context){\n  const meetupID = context.params.meetupID\n\n  const client = await MongoClient.connect('mongodb+srv://stefan:9CvMaN9B2LyY4RA@cluster0.5dzau.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({_id: mee});\n\n  client.close()\n\n  return {\n    props: {\n      meetupData: {\n        id: meetupID,\n        title: 'First Meetup',\n        description: 'Description',\n        address: 'London',\n        image: 'https://www.history.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTYyNDg1MjE3MTI1Mjc5Mzk4/topic-london-gettyimages-760251843-promo.jpg'\n      }\n    }\n  }\n}\n\nexport default MeetUpDetails\n"]},"metadata":{},"sourceType":"module"}